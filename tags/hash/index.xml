<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>hash - Tag -</title><link>https://youngeun-in.github.io/tags/hash/</link><description>hash - Tag -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 31 Aug 2022 15:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/tags/hash/" rel="self" type="application/rss+xml"/><item><title>해시</title><link>https://youngeun-in.github.io/%ED%95%B4%EC%8B%9C/</link><pubDate>Wed, 31 Aug 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%ED%95%B4%EC%8B%9C/</guid><description>해시(hash)란 임의의 길이의 데이터를 고정된 길이의 데이터로 매핑(mapping)한 값이다. 복호화를 위해 사용하지 않으며, 암호화보다 연산이 빠르다는 특징이 있다.
해시 알고리즘 MD5 (Message Digest)
128비트 암호화 해시함수 원본 그대로인지를 확인하는 무결성 검사 등에 사용 해킹에 취약하므로 SHA를 권장 임의의 길이를 입력받아 128비트 고정길이 값을 출력 SHA (Secure Hash Algorithm)
서로 관련된 암호학적 해시 함수들의 모음 SHA-0, SHA-1, SHA-2(224, 256, 384, 512) 존재 SHA-0, SHA-1에 대한 공격 발견 SHA-256은 256비트로 구성되며 64자리 문자열을 반환 참고 https://velog.</description></item><item><title>Hash와 HashMap</title><link>https://youngeun-in.github.io/hash%EC%99%80-hashmap/</link><pubDate>Sun, 15 May 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/hash%EC%99%80-hashmap/</guid><description>해싱 해싱은 산술적인 연산을 이용하여 키가 있는 위치를 계산하여 찾아가는 검색 방식이다. 키값을 원소 위치로 변환하는 함수를 해시 함수(Hash Function)라 한다. 해시 함수에 의해 계산된 주소에 저장할 값을 저장한 표를 해시 테이블(Hash Table)이라 한다. 해시 테이블은 빠른 검색 속도를 제공하는데 이유는 내부적으로 버킷(배열)을 사용하여 데이터를 저장하기 때문이다. 해시 테이블은 각각의 key 값에 해시 함수를 적용해 배열의 고유한 인덱스를 생성한 후 인덱스를 이용해 값을 저장한다. 실제 값이 저장되는 장소를 버킷이라 한다.</description></item></channel></rss>