<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>mvc - Tag -</title><link>https://youngeun-in.github.io/tags/mvc/</link><description>mvc - Tag -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 12 Nov 2023 15:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/tags/mvc/" rel="self" type="application/rss+xml"/><item><title>Spring MVC 구조</title><link>https://youngeun-in.github.io/spring-mvc-%EA%B5%AC%EC%A1%B0/</link><pubDate>Sun, 12 Nov 2023 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/spring-mvc-%EA%B5%AC%EC%A1%B0/</guid><description>DispatcherServlet 구조 스프링 MVC는 프론트 컨트롤러 패턴으로 구현되어 있다. 스프링 MVC의 프론트 컨트롤러가 디스패처 서블릿(DispatcherServlet)이다.
FrontController 패턴 특징은 다음과 같다.
프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받음 프론트 컨트롤러가 요청에 맞는 컨트롤러를 찾아서 호 입구를 하나로 하여 공통 처리 가능 프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 됨 DispacherServlet는 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.
상속관계는 다음과 같다. DispatcherServlet -&amp;gt; FrameworkServlet -&amp;gt; HttpServletBean -&amp;gt; HttpServlet</description></item><item><title>MVC 패턴</title><link>https://youngeun-in.github.io/mvc-%ED%8C%A8%ED%84%B4/</link><pubDate>Sat, 11 Nov 2023 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/mvc-%ED%8C%A8%ED%84%B4/</guid><description>서블릿과 JSP의 한계 서블릿으로 개발할 때는 뷰(View)화면을 위한 HTML을 만드는 작업이 자바 코드에 섞여서 지저분하고 복잡했다.
JSP를 사용한 덕분에 뷰를 생성하는 HTML 작업을 깔끔하게 가져가고, 중간중간 동적으로 변경이 필요한 부분에만 자바 코드를 적용했다. 그러나 이러한 형태는 비즈니스 로직과 뷰 영역이 혼재되어 코드를 이해하기 어렵고 유지보수가 힘들어진다는 단점이 있다.
MVC 패턴 - 개요 하나의 서블릿이나 JSP만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 변경의 라이프 사이클이 다르기 때문에 유지보수하기 좋지 않다.</description></item></channel></rss>