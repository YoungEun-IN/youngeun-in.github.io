<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>interceptor - Tag -</title><link>https://youngeun-in.github.io/tags/interceptor/</link><description>interceptor - Tag -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 07 Mar 2023 15:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/tags/interceptor/" rel="self" type="application/rss+xml"/><item><title>Filter vs Interceptor vs AOP</title><link>https://youngeun-in.github.io/filter-vs-interceptor-vs-aop/</link><pubDate>Tue, 07 Mar 2023 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/filter-vs-interceptor-vs-aop/</guid><description><![CDATA[Filter Filter(필터)는 요청과 응답을 거른 뒤 정제하는 역할을 한다. 서블릿 필터는 DispatcherServlet 이전에 실행이 되는데 필터가 동작하도록 지정된 자원의 앞단에서 요청내용을 변경하거나, 여러 가지 체크를 수행할 수 있다. 또한 자원의 처리가 끝난 후 응답 내용에 대해서도 변경하는 처리를 할 수가 있다. 즉 스프링 컨텍스트 외부에 존재하여 스프링과 무관한 자원에 대해 동작한다. 보통 web.xml에 등록하고, 일반적으로 인코딩 변환 처리, XSS 방어 등의 요청에 대한 처리로 사용된다.
필터 흐름 1  HTTP 요청 -&gt; WAS -&gt; 필터 -&gt; 서블릿 -&gt; 컨트롤러   필터 인터페이스 1 2 3 4 5  public interface Filter { public default void init(FilterConfig filterConfig) throws ServletException{} public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException; public default void destroy() {} }   필터 인터페이스를 구현하고 등록하면 서블릿 컨테이너가 필터를 싱글톤 객체로 생성하고, 관리한다.]]></description></item></channel></rss>