<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>concurrent-hashmap - Tag -</title><link>https://youngeun-in.github.io/tags/concurrent-hashmap/</link><description>concurrent-hashmap - Tag -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 03 Mar 2022 09:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/tags/concurrent-hashmap/" rel="self" type="application/rss+xml"/><item><title>HashMap vs HashTable vs ConcurrentHashMap</title><link>https://youngeun-in.github.io/hashmap-vs-hashtable-vs-concurrenthashmap/</link><pubDate>Thu, 03 Mar 2022 09:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/hashmap-vs-hashtable-vs-concurrenthashmap/</guid><description>각 자료구조는 필요에 따라 선택되고 활용된다. Map 인터페이스의 구현체로는 HashMap, HashTable, ConcurrentHashMap 등이 있다. Map 인터페이스를 구현하면, &amp;lt;Key, Value&amp;gt; 형태를 띈다. 그렇다면 이 셋은 무슨 특징을 가지고, 서로 어떤 차이가 있을까? 이번 글에서 해당 구현체를 비교하며 확인해보자.
HashMap key와 value에 null을 허용한다. 동기화를 보장하지 않는다. HashMap은 thread-safe하지 않아, 싱글 쓰레드 환경에서 사용하는 게 좋다. 한편, 동기화 처리를 하지 않기 때문에 데이터를 탐색하는 속도가 빠르다. 결국 HashTable과 ConcurrentHashMap보다 데이터를 찾는 속도는 빠르지만, 신뢰성과 안정성이 떨어진다.</description></item></channel></rss>