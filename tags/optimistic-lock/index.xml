<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>optimistic-lock - Tag -</title><link>https://youngeun-in.github.io/tags/optimistic-lock/</link><description>optimistic-lock - Tag -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 08 May 2022 15:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/tags/optimistic-lock/" rel="self" type="application/rss+xml"/><item><title>비관적락, 낙관적 락</title><link>https://youngeun-in.github.io/%EB%B9%84%EA%B4%80%EC%A0%81%EB%9D%BD-%EB%82%99%EA%B4%80%EC%A0%81-%EB%9D%BD/</link><pubDate>Sun, 08 May 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%EB%B9%84%EA%B4%80%EC%A0%81%EB%9D%BD-%EB%82%99%EA%B4%80%EC%A0%81-%EB%9D%BD/</guid><description><![CDATA[비관적 락 비관적 락은 대부분의 경우 트랜젝션에서 충돌이 발생할 것이라 가정하고, 일단 락을 걸고 보는 기법이다. 락을 걸게 되면 다른 트랜잭션에서는 락이 해제되기 전에 데이터를 가져갈 수 없다. 비관적 락은 데이터베이스의 락 알고리즘을 통해 구현되며, 데이터를 수정하는 즉시 트랜잭션 충돌을 감지한다.
JPA에서 비관적 락 구현 1 2 3 4 5 6  public interface HomeRepository extends JpaRepository&lt;Home, Long&gt; { @Lock(LockModeType.PESSIMISTIC_WRITE) @Query(&#34;select h from Home h where h.name = :name&#34;) Home findWithNameForUpdate(@Param(&#34;name&#34;) String name); }   1 2 3 4 5 6 7 8 9 10 11 12 13  @Service @RequiredArgsConstructor @Slf4j public class HomeService { private final HomeRepository homeRepository; @Transactional public int decreasePrice(String name, int price) { Home home = homeRepository.]]></description></item></channel></rss>