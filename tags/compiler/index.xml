<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>compiler - Tag -</title><link>https://youngeun-in.github.io/tags/compiler/</link><description>compiler - Tag -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 01 Mar 2022 15:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/tags/compiler/" rel="self" type="application/rss+xml"/><item><title>Java 프로그램 실행 과정</title><link>https://youngeun-in.github.io/java-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89-%EA%B3%BC%EC%A0%95/</link><pubDate>Tue, 01 Mar 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/java-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89-%EA%B3%BC%EC%A0%95/</guid><description>Java 프로그램 실행 과정 Java로 작성된 코드를 javac(Java 컴파일러)를 이용, Java 바이트 코드로 컴파일 한다. Java Source(.java)는 Java 컴파일러에 의해, 자바 코드 파일(.java)에서 자바 바이트 코드(.class)로 컴파일 된다. 컴파일된 Java 바이트 코드들은 ClassLoader(클래스 로더)에 의해 Runtime Data Area(런타임 데이터 영역)에 로드된다. 컴파일된 바이트코드는 JVM의 클래스 로더에 전달된다. 클래스 로더는 애플리케이션 런타임 중 필요한 클래스 파일들을 동적으로 Runtime Data Area(런타임 데이터 영역 = JVM의 메모리)에 로드한다. 즉, 실행 중에 필요한 클래스 파일을 메모리에 올리는 역할 Execution Engine(실행 엔진)이 메모리에 로딩된 바이트 코드를 기계어로 바꾸어 명령어 단위로 실행 한다.</description></item></channel></rss>