<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>DB - Category -</title><link>https://youngeun-in.github.io/categories/db/</link><description>DB - Category -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 08 May 2022 15:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/categories/db/" rel="self" type="application/rss+xml"/><item><title>비관적락, 낙관적 락</title><link>https://youngeun-in.github.io/%EB%B9%84%EA%B4%80%EC%A0%81%EB%9D%BD-%EB%82%99%EA%B4%80%EC%A0%81-%EB%9D%BD/</link><pubDate>Sun, 08 May 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%EB%B9%84%EA%B4%80%EC%A0%81%EB%9D%BD-%EB%82%99%EA%B4%80%EC%A0%81-%EB%9D%BD/</guid><description>비관적 락 비관적 락은 대부분의 경우 트랜젝션에서 충돌이 발생할 것이라 가정하고, 일단 락을 걸고 보는 기법이다. 락을 걸게 되면 다른 트랜잭션에서는 락이 해제되기 전에 데이터를 가져갈 수 없다. 비관적 락은 데이터베이스의 락 알고리즘을 통해 구현되며, 데이터를 수정하는 즉시 트랜잭션 충돌을 감지한다.
JPA에서 비관적 락 구현 1 2 3 4 5 6 7 8 public interface HomeRepository extends JpaRepository&amp;lt;Home, Long&amp;gt; { Home findByName(String name); @Lock(LockModeType.PESSIMISTIC_WRITE) @Query(&amp;#34;select h from Home h where h.</description></item><item><title>트랜잭션</title><link>https://youngeun-in.github.io/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/</link><pubDate>Wed, 06 Apr 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/</guid><description>트랜잭션은 데이터베이스 상태를 변환시키는 하나의 논리적 기능 수행 단위이다. 즉, 한 번에 처리되어야 할 일련의 작업을 말한다.
트랜잭션으로 원하는 작업의 단위를 정하게 되면 작업을 수행하는 도중 문제가 발생하였을 때 이전에 진행되었던 작업이 롤백된다. 모든 작업을 안정적으로 끝마친 후에 실제 데이터베이스에 반영할 수 있다.
트랜잭션의 범위는 커넥션 기준이다. 스프링 프레임워크의 트랜잭션 처리는 메소드 간에 커넥션 객체를 전달하지 않아도 한 트랜잭션으로 묶어서 실행하도록 돕는다.
트랜잭션의 성질 Atomicity(원자성) 하나의 트랜잭션이 더 작게 나눌 수 없는 최소의 단위라는 뜻이다.</description></item><item><title>Redis</title><link>https://youngeun-in.github.io/redis/</link><pubDate>Mon, 28 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/redis/</guid><description>캐시란 cache란 사용자의 입장에서 데이터의 원래 소스보다 더 빠르게 그리고 더 효율적으로 액세스할 수 있는 임시 데이터 저장소를 뜻한다. 대부분의 애플리케이션에서 속도 향상을 위해 cache를 사용하고 있다. 캐시에 데이터나 계산된 결과 값의 복사본을 저장해 둠으로써 전체적인 처리 속도를 향상시킨다.
캐시를 사용하는 경우는 다음과 같다.
데이터에 직접적으로 접근하는 데 걸리는 시간이 오래 걸릴 때 데이터가 잘 변하지 않는 경우 반복적으로 동일한 결과를 돌려주는 경우 (이미지와 썸네일 등) Redis란 레디스는 전 세계에서 가장 유명한 caching 솔루션이다.</description></item><item><title>DB 인덱스</title><link>https://youngeun-in.github.io/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link><pubDate>Fri, 25 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid><description>인덱스란 추가적인 쓰기 작업과 저장 공간을 활용하여 데이터베이스 테이블의 검색 속도를 향상시키기 위한 기술이다. 인덱스는 테이블 내 1개의 컬럼, 혹은 여러 개의 컬럼을 이용하여 생성될 수 있다. 고속의 검색 동작뿐만 아니라 레코드 접근과 관련 효율적인 순서 매김 동작에 대한 기초를 제공한다.
인덱스 사용 시 장단점 장점 검색은 속도가 무척 빨라질 수 있다. (단, 항상 그런 것은 아니다.) 그 결과 해당 쿼리의 부하가 줄어들어서 결국 시스템 전체의 성능이 향상된다. 단점 인덱스가 데이터베이스 공간을 차지해서 추가적인 공간이 필요해지는데, 대략 그 비율은 10% 정도이다.</description></item></channel></rss>