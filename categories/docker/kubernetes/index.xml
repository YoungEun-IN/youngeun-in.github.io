<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>docker/kubernetes - Category -</title><link>https://youngeun-in.github.io/categories/docker/kubernetes/</link><description>docker/kubernetes - Category -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://youngeun-in.github.io/categories/docker/kubernetes/" rel="self" type="application/rss+xml"/><item><title>Dockerfile 명령어</title><link>https://youngeun-in.github.io/dockerfile-%EB%AA%85%EB%A0%B9%EC%96%B4/</link><pubDate>Tue, 12 Apr 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/dockerfile-%EB%AA%85%EB%A0%B9%EC%96%B4/</guid><description><![CDATA[Dockerfile 포맷 하나의 Dockerfile은 기본적으로 다음과 같은 구조를 가진 여러 개의 명령문으로 구성되어 있다.
1 2  # 주석(Comment) 명령어(INSTRUCTION) 인자(arguments)   각 명령문은 명령어로 시작하고 여러 개의 인자가 따라올 수 있으며, 해당 명령문에 대한 주석도 달 수 있다. 인자와 구분이 쉽도록 명령어는 모두 영문 대문자로 써주는 것이 관례이다.
Dockerfile 명령문   FROM 명령문
  1 2  FROM &lt;이미지&gt; FROM &lt;이미지&gt;:&lt;태그&gt;    하나의 Docker 이미지는 base 이미지부터 시작해서 기존 이미지위에 새로운 이미지를 중첩해서 여러 단계의 이미지 층(layer)을 쌓아가며 만들어진다.]]></description></item><item><title>도커 이미지 실행 명령어</title><link>https://youngeun-in.github.io/%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%8B%A4%ED%96%89-%EB%AA%85%EB%A0%B9%EC%96%B4/</link><pubDate>Mon, 11 Apr 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%8B%A4%ED%96%89-%EB%AA%85%EB%A0%B9%EC%96%B4/</guid><description>Docker run 명령어 이미지가 OS일 경우 1 docker run -dit 이미지명 bash 1 docker attach 컨테이너아이디 이미지가 Program일 경우 1 docker run -d 이미지명 1 docker exec -it 컨테이너아이디 bash Docker run 옵션 종류 -i, &amp;ndash;interactive 표준 입력(stdin)을 활성화하며, 컨테이너와 연결(attach)되어 있지 않더라도 표준 입력을 유지한다. 보통 이 옵션을 사용하여 Bash 에 명령을 입력한다. -t, &amp;ndash;tty TTY 모드(pseudo-TTY)를 사용한다.</description></item><item><title>도커</title><link>https://youngeun-in.github.io/%EB%8F%84%EC%BB%A4/</link><pubDate>Sun, 10 Apr 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%EB%8F%84%EC%BB%A4/</guid><description>VM vs 컨테이너 VM 하드웨어 인프라스트러처 위에 VMWare나 VirtualBox와 같은 HyperVisor 소프트웨어를 이용해서 각각의 가상의 머신을 만들 수 있다. 한 운영체제 위에서 동일한 어플리케이션을 각각의 고립된 다른 환경에서 구동하기 위해서는 가상 머신을 이용해서 어플리케이션을 구동해야 했다. 이 가상 머신은 각각의운영체제를 포함하고 있기 때문에 맥이라는 OS 위에서 가상머신을 이용하면 윈도와 리눅스를 동시에 구동할 수 있다.
고립된 환경에서 애플리케이션을 구동하기 위해서 VM을 사용하면 운영 체제를 포함하고 있기 때문에 굉장히 무겁고 그리고 시작하는 데도 오래 걸리고 또 컴퓨터 운영체제 인프라스트럭처 리소스를 많이 잡아먹는 범인이 될 수도 있다.</description></item></channel></rss>