<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>설계방법론 - Category -</title><link>https://youngeun-in.github.io/categories/%EC%84%A4%EA%B3%84%EB%B0%A9%EB%B2%95%EB%A1%A0/</link><description>설계방법론 - Category -</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 08 Mar 2022 13:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/categories/%EC%84%A4%EA%B3%84%EB%B0%A9%EB%B2%95%EB%A1%A0/" rel="self" type="application/rss+xml"/><item><title>캡슐화</title><link>https://youngeun-in.github.io/%EC%BA%A1%EC%8A%90%ED%99%94/</link><pubDate>Tue, 08 Mar 2022 13:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%EC%BA%A1%EC%8A%90%ED%99%94/</guid><description>객체지향과 캡슐화 객체는 캡슐화된 상태와 외부에 노출되어 있는 행동을 갖고 있으며, 다른 객체와 메시지를 주고 받으면서 협력한다. 객체는 메시지를 받으면 객체 그에 따른 로직(행동)을 수행하게 되고, 필요하다면 객체 스스로 내부의 상태값도 변경한다. 간단히 말해서 객체지향 프로그래밍은 객체가 스스로 일을 하도록 하는 프로그래밍이다.
상태를 가지는 객체를 추가했다면 객체가 제대로 된 역할을 하도록 구현해야 한다. 즉 객체가 로직을 구현하도록 한다. 상태 데이터를 꺼내 로직을 처리하도록 구현하지 말고 객체에 메시지를 보내 일을 하도록 해야한다.</description></item><item><title>AOP</title><link>https://youngeun-in.github.io/aop/</link><pubDate>Thu, 24 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/aop/</guid><description>AOP는 기능을 핵심 비즈니스 로직과 공통 모듈로 구분하고 핵심 로직에 영향을 미치지 않고 사이사이에 공통 모듈을 효과적으로 잘 끼워 넣어 중복성을 감소시킬 수 있는 개발 방법이다.
AOP 용어 용어 설명 Advice Joinpoint에서 실행되어야 하는 프로그램 코드
독립된 클래스의 메소드로 작성함
실질적으로 어떤 일을 해야할 지에 대한 것, 실질적인 부가기능을 담은 구현체
BEFORE, AROUND, AFTER의 실행 위치 지정 Joinpoint Advice를 적용할 수 있는 후보 지점 혹은 호출 이벤트</description></item></channel></rss>