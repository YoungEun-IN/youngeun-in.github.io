<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts -</title><link>https://youngeun-in.github.io/posts/</link><description>All Posts |</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 01 Mar 2022 15:12:26 +0900</lastBuildDate><atom:link href="https://youngeun-in.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Java 프로그램 실행 과정</title><link>https://youngeun-in.github.io/java-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89-%EA%B3%BC%EC%A0%95/</link><pubDate>Tue, 01 Mar 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/java-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89-%EA%B3%BC%EC%A0%95/</guid><description>Java 프로그램 실행 과정 Java로 작성된 코드를 javac(Java 컴파일러)를 이용, Java 바이트 코드로 컴파일 한다. Java Source(.java)는 Java 컴파일러에 의해, 자바 코드 파일(.java)에서 자바 바이트 코드(.class)로 컴파일 된다. 컴파일된 Java 바이트 코드들은 ClassLoader(클래스 로더)에 의해 Runtime Data Area(런타임 데이터 영역)에 로드된다. 컴파일된 바이트코드는 JVM의 클래스 로더에 전달된다. 클래스 로더는 애플리케이션 런타임 중 필요한 클래스 파일들을 동적으로 Runtime Data Area(런타임 데이터 영역 = JVM의 메모리)에 로드한다. 즉, 실행 중에 필요한 클래스 파일을 메모리에 올리는 역할 Execution Engine(실행 엔진)이 메모리에 로딩된 바이트 코드를 기계어로 바꾸어 명령어 단위로 실행 한다.</description></item><item><title>Redis</title><link>https://youngeun-in.github.io/redis/</link><pubDate>Mon, 28 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/redis/</guid><description>캐시란 cache란 사용자의 입장에서 데이터의 원래 소스보다 더 빠르게 그리고 더 효율적으로 액세스할 수 있는 임시 데이터 저장소를 뜻한다. 대부분의 애플리케이션에서 속도 향상을 위해 cache를 사용하고 있다. 캐시에 데이터나 계산된 결과 값의 복사본을 저장해 둠으로써 전체적인 처리 속도를 향상시킨다.
캐시를 사용하는 경우는 다음과 같다.
데이터에 직접적으로 접근하는 데 걸리는 시간이 오래 걸릴 때 데이터가 잘 변하지 않는 경우 반복적으로 동일한 결과를 돌려주는 경우 (이미지와 썸네일 등) Redis란 레디스는 전 세계에서 가장 유명한 caching 솔루션이다.</description></item><item><title>Etag</title><link>https://youngeun-in.github.io/etag/</link><pubDate>Sun, 27 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/etag/</guid><description>HTTP 캐시 Static file(js, css, image) 뿐만 아니라 API와 같은 Dynamic content에도 간단하게 Cache기능을 사용하게 설정하면 API속도도 증가되고 유저 입장에서는 네트웍 트래픽을 줄일 수 있다. API와 같이 언제 바뀔지 모르는 데이터의 Cache는 쉽지 않은데, Etag를 이용하면 서버에서 새로운 데이터를 먼저 확인하고 줄 수 있기 때문에 API에도 충분히 적용가능하다.
Etag API데이터의 MD5 Hash를 ETag로 사용하게 되면 DB부하를 줄일 순 없지만, Response 시간을 줄이는데 도움이 될 수 있다. Response에 다음과 같은 Etag 헤더를 추가해주면, 다음 동일한 API를 부르면 아래와 같은 Request 헤더에 체크하는 헤더가 추가된다.</description></item><item><title>DB 인덱스</title><link>https://youngeun-in.github.io/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link><pubDate>Fri, 25 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid><description><![CDATA[인덱스의 종류 클러스터형 인덱스(Clustered Index)  영어 사전처럼 책의 내용 자체가 순서대로 정렬되어 있어서 인덱스 자체가 책의 내용과 같은 것 테이블 당 한 개만 생성할 수 있다. 그러므로 어느 열에 클러스터형 인덱스를 생성하는지에 따라서 시스템의 성능이 달라질 수 있다. 생성 시에는 데이터 페이지 전체가 다시 정렬된다. 그러므로 이미 대용량의 데이터가 입력된 상태라면 신중하게 생각해야 한다. 보조 인덱스보다 검색 속도는 더 빠르다. 하지만 데이터의 입력/수정/삭제는 더 느리다.  보조 인덱스(Secondary Index)  &lt;찾아보기&gt;가 별도로 있고, &lt;찾아보기&gt;를 찾은 후에 그 옆에 표시된 페이지로 가야 실제 찾는 내용이 있는 것 데이터 페이지는 그냥 둔 상태에서 별도의 페이지에 인덱스를 구성한다.]]></description></item><item><title>AOP</title><link>https://youngeun-in.github.io/aop/</link><pubDate>Thu, 24 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/aop/</guid><description>📕 AOP AOP는 OOP를 더욱 OOP답게 프로그래밍 할 수 있게 도와주는 것으로 애플리케이션의 핵심적인 기능과 부가적인 기능을 분리해 Aspect라는 모듈로 만들어 설계하고 개발하는 방법이다.
실제로 Spring doc document 에서는 아래와 같이 말하고 있다.
1 2 3 4 5 Aspect-oriented Programming (AOP) complements Object-oriented Programming (OOP) by providing another way of thinking about program structure AOP는 프로그램 구조에 대한 다른 생각의 방향을 제공해주면서 OOP를 보완하고 있다. 예를 들면 어떠한 클래스를 대상으로 핵심 기능과 부가적인 기능의 관점으로 공통 사용 부가 기능들을 외부의 독립된 클래스로 분리하고 이를 모듈화하여 재사용할 수 있게끔 하는 프로그래밍 기법이다.</description></item><item><title>Servlet 동작 방식</title><link>https://youngeun-in.github.io/servlet-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D/</link><pubDate>Wed, 23 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/servlet-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D/</guid><description><![CDATA[서블릿 컨테이너 서블릿 컨테이너는 서블릿을 담아 관리한다. 서블릿은 싱글톤으로 관리된다.
서블릿이 호출되는 과정  Servlet Request / Servlet Response 객체 생성 설정 파일을 참고하여 매핑할 Servlet을 확인  1 2 3 4 5 6 7 8 9  &lt;servlet&gt; &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.jsp.web.MyServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;   해당 서블릿 인스턴스 존재를 유무를 확인하여 없으면 생성(init()) Servlet Container에 스레드를 생성하고, res req를 인자로 service 실행  참고 https://youtu.be/calGCwG_B4Y]]></description></item><item><title>Array &amp; ArrayList</title><link>https://youngeun-in.github.io/array-arraylist/</link><pubDate>Thu, 17 Feb 2022 18:36:46 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/array-arraylist/</guid><description>Array 와 Cache Locality Array 는 같은 타입을 가진 여러 요소들은 한 곳에 저장하기 위해서 고안되었다. Array 는 할당하는 크기 만큼이 메모리에 연속적으로 할당 되는데 이로 인해 cache locality 을 이용한 빠른 접근이 가능하다.
위 사진을 보면 array 내에 있는 각 element 들이 가지는 메모리 주소가 연속적으로 할당되어 있는 것을 볼 수 있다. 캐시 메모리에 대한 간단한 설명을 읽어보면 이해하는데 도움이 된다.
캐시 메모리는 데이터 지역성(Locality)의 원리를 사용한다. 데이터 지역성은 대표적으로 시간 지역성(Temporal locality)과 공간 지역성(Spatial Locality)으로 나뉘는데, 시간 지역성이란 for나 while 같은 반복문에 사용하는 조건 변수처럼 한 번 참조된 데이터는 잠시 후에 또 참조될 가능성이 높다는 것이고, 공간 지역성이란 A[0], A[1]과 같은 데이터 배열에 연속으로 접근할 때 참조된 데이터 근처에 있는 데이터가 잠시 후에 사용될 가능성이 높다는 것이다.</description></item><item><title>자바의 Nested Class</title><link>https://youngeun-in.github.io/%EC%9E%90%EB%B0%94%EC%9D%98-nested-class/</link><pubDate>Thu, 17 Feb 2022 10:36:46 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/%EC%9E%90%EB%B0%94%EC%9D%98-nested-class/</guid><description>Nested Class? 클래스 내부에 선언한 클래스로 Static Nested 클래스와 Inner 클래스로 나뉜다. 내부 클래스는 또 멤버클래스, 지역 클래스와 익명 클래스로 나뉜다. 내부 클래스는 클래스 내부에서만 사용되는 경우 논리적으로 묶기 위해서 사용되거나 캡슐화를 통해 구현되어야 할 때 사용된다. 이와 같은 이유로 내부 클래스는 캡술화의 특징을 가지게 되는데, 클래스 내부를 숨기거나 은닉하는데 유용하며, 주로 Java GUI에서 사용된다.
Nested Class의 구조는 다음과 같다.
Static Nested Inner Class 클래스 내부에 구현된 클래스에 static 예약어를 붙여 논리적으로 내부 클래스와 내부 클래스를 구현한 클래스 관계를 묶어준다.</description></item><item><title>equals와 hashCode</title><link>https://youngeun-in.github.io/equals%EC%99%80-hashcode/</link><pubDate>Wed, 16 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/equals%EC%99%80-hashcode/</guid><description>equals 메소드 Object 클래스에 정의된 equals 메소드는 다음과 같다.
1 2 3 public boolean equals(Object obj) { return (this == obj); } 단순히 Object의 ==로 비교하는 것을 확인할 수 있다.
두 객체의 내용이 같은지 확인하려면 equals 메소드를 Override하면 된다.
1 2 3 4 5 6 7 @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AttachFile that = (AttachFile) o; return Objects.</description></item><item><title>Comparable 인터페이스와 Comparator 인터페이스의 차이</title><link>https://youngeun-in.github.io/comparable-and-comparator/</link><pubDate>Tue, 15 Feb 2022 15:12:26 +0900</pubDate><author>Author</author><guid>https://youngeun-in.github.io/comparable-and-comparator/</guid><description><![CDATA[Comparable 인터페이스 JAVA에서는 아래의 인터페이스 구현을 통해 정렬의 기준을 프로그래머가 직접 정의할 것을 요구하고 있다.
1 2 3  public interface Comparable&lt;T&gt; { int compareTo(T obj); }   사용 예시는 다음과 같다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  import java.util.Iterator; import java.util.TreeSet; class Person implements Comparable&lt;Person&gt; { String name; int age; public Person(String name, int age) { this.]]></description></item></channel></rss>